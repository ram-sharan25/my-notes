:PROPERTIES:
:ID:       E83F883C-37E1-433A-AEDD-47A6DDCC5A3E
:END:
#+title: MakeFile
#+resources:[https://www.gnu.org/software/make/manual/make.html]


* MakeFile
- this determines which of part of the larger program is to be recompiled
  and issues commands to recompile them.
- make can be used with any programming language whose compiler can be run
  with a shell command.
- it can also be used to describe any task where some file is to be updated
  automatically when there is change in another file.

** Preparing and running make
- to prepare to use make , a file called makefile that describes the relationship
  among the files in program and commands  how to update each files.
- Typically in a program, executable file is updated from object file, which
  in turn are made by compiling the source file.
- the simple shell command **make** is  used to run the makefile
- The make program uses the makefile database and the last modification times
  of the files to decide which of the file is to be updated.
- Also it issues the  recipes recorded in the database.


** Introduction to Makefile
- Makefile tells make how to compile and link a program.
- When make recompiles the editor , each file must be recompiled.
- If a header file is changed then, each file sourcing this header is to be
  recompiled.
- And the files are to be freshly linked to make a working executable.

#+BEGIN_SRC shell
target.. : prerequisites ...
	   recipe
	   ...
	   ...
#+END_SRC
*** Target
- target is usually the file generated by the program.
- Example : executable or object files.
- Target also can be the action **clean** to be carried out.

*** Prequisite:
- This is the input used to create the target files.
- Target usually depends on several files.

*** Recipe:
- It is the action that make carries out.
- It can be one or more than one command, either on same line or each
  on its own line.
- **There is a tab character at the begining of every receipe line !**
- If you want to prefix your receipes with a specific character other then
  it is to be specified in the .RECIPEPREFIX variable to an alternate character.
- If any of the pre req changes then the target files are changed with the
  recipe and the prerequisites.
- pre req is not to be necessarialy attached to the recipe, example for
  **clean** **delete** there is no pre req required.
- Recipe contains the rule for recompiling.
- A rule then explains how and when to recompile the pre req to reach the target.

** Simple MakeFile
- Here is a example of a make file that makes an executable **edit**  from the
  eight object files which are inturn comlied from eight source files.
- Here in the example each C files includes the defs.h
- Also only the defining editing commands includes commands.h and only low
  levels file  that changed the editor buffer  includes buffer.h
#+BEGIN_SRC shell
  edit : main.o kdb.o display.o \
	 insert.o search.o files.o utils.o
	cc -o edit main.o kbd.o command.o display.o\
	   insert.o search.o files.o utils.o

  main.o : main.c defs.h
	 cc -c main.c
  kbd.o  : kbd.c defs.h command.h
	  cc -c kbd.c
  command.o : command.c defs.h command.h
	    cc -c command.c
  display.o : display.c defs.h buffer.h
	    cc -c display.c
  insert.o : insert.c defs.h buffer.h
	    cc -c insert.c
  search.o : search.c defs.h buffer.h
	    cc -c search.c
  files.o : file.c defs.h command.h
	    cc -c files.c
  utils.o : utils.c defs.h
	    cc -c utils.c
  clean :
	 rm edit main.o kbd.o command.o display.o \
	    insert.o search.o files.o utils.o


#+END_SRC

- Here main executable is main and it is generated from the object files
  each generated below.
- \ is used to split the long lines into two lines.
- clean is a command with no target and is used to delete executable and all
  the object files.
- each object is generated from corresponding c , header files using  `cc -c
  and the c file for that object file.\\
  This is the rule for each c file to be converted to object files .

- By default when the make file is started it tries to update the goal file
  (i.e the file without .  , here edit is that file)\\
  This is the default goal of the make.
- This can be overridden using the .DEFAULT_GOAL special variable.
- edit is the default executable program here and make file updates the edit.


** Variables in make file
#+BEGIN_SRC shell
  objects = main.o kdb.o display.o \
	  insert.o search.o files.o utils.o
  edit : $(objects)
  cc -o edit $(objects)

  main.o : main.c defs.h
  cc -c main.c
  kbd.o  : kbd.c defs.h command.h
  cc -c kbd.c
  command.o : command.c defs.h command.h
  cc -c command.c
  display.o : display.c defs.h buffer.h
  cc -c display.c
  insert.o : insert.c defs.h buffer.h
  cc -c insert.c
  search.o : search.c defs.h buffer.h
  cc -c search.c
  files.o : file.c defs.h command.h
  cc -c files.c
  utils.o : utils.c defs.h
  cc -c utils.c
  clean :
  rm $(objects)

#+END_SRC
- As seen in the above examples variables can also be used in the make file.

** Letting make Deduce the Recipes
- It is not necessary to define the recipe to compile the individual C source
  files, because make can figure the implicit rule to generate **.o** file from
  the **.c** file using  **cc -c ** command.\\
  For example it will use  **cc -c main.c -o main-o **  command to
  generate **main.o**
#+BEGIN_SRC shell
  objects = main.o kdb.o display.o \
	 insert.o search.o files.o utils.o
  edit : $(objects)
	cc -o edit $(objects)

  main.o : defs.h
  kbd.o  : defs.h command.h
  command.o :  defs.h command.h
  display.o : defs.h buffer.h
  insert.o : defs.h buffer.h
  search.o :  defs.h buffer.h
  files.o : defs.h command.h
  utils.o : defs.h
  clean :
	 rm $(objects)

#+END_SRC

- Using this file also generates the **edit** program as in the first case.

** Yet more few lines of code
- If the objects of the makefile are only generated by inplicit rules then
  alternative way of writing make file is also possible.
- Here group entries can be grouped together based on their prerequisites.
  #+BEGIN_SRC shell
    objects = main.o kdb.o display.o \
	   insert.o search.o files.o utils.o
    edit : $(objects)
	  cc -o edit $(objects)

    $(objects) : defs.h
    kbd.o command.o files.o : command.h
    display.o insert.o search.o files.o : buffer.h

    clean :
	   rm $(objects)

#+END_SRC

- This is more compact way of writing make file.
